name: Create new Zenodo record

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to use (dev or prod)"
        required: false
        default: "dev"
jobs:
  creat:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Set environment variables
        run: |
          if [[ "${{ github.event.inputs.environment }}" == "prod" ]]; then
            echo "BASE_URL=https://zenodo.org" >> $GITHUB_ENV
            echo "TOKEN=${{ secrets.ZENODO_TOKEN }}" >> $GITHUB_ENV
          else
            echo "BASE_URL=https://sandbox.zenodo.org" >> $GITHUB_ENV
            echo "TOKEN=${{ secrets.ZENODO_TOKEN_DEV }}" >> $GITHUB_ENV
          fi

      - name: Check for existing token.txt
        run: |
          if [[ -f ".github/token.txt" ]]; then
            echo "❌ .github/token.txt already exists. Aborting to avoid overwrite."
            exit 1
          fi

      - name: Upload metadata to Zenodo
        id: metadata
        run: |
          curl -s -H "Authorization: Bearer ${{ env.TOKEN }}" \
            -H "Content-Type: application/json" \
            -d @metadata.json \
            ${{ env.BASE_URL }}/api/deposit/depositions \
            > response.json

          echo "DEPOSIT_ID=$(jq -r .id response.json)" >> $GITHUB_ENV
          echo "BUCKET_URL=$(jq -r .links.bucket response.json)" >> $GITHUB_ENV

          echo "----- Zenodo API Response -----"
          cat response.json

      - name: Upload PDF
        run: |
          curl -X PUT \
            -H "Authorization: Bearer ${{ env.TOKEN }}" \
            -H "Content-Type: application/octet-stream" \
            --data-binary @README.pdf \
            "${{ env.BUCKET_URL }}/README.pdf"

      - name: Upload Markdown (optional)
        run: |
          curl -X PUT \
            -H "Authorization: Bearer ${{ env.TOKEN }}" \
            -H "Content-Type: application/octet-stream" \
            --data-binary @README.md \
            "${{ env.BUCKET_URL }}/README.md"

      - name: Publish deposition
        run: |
          echo "Publishing deposition ID: ${{ env.DEPOSIT_ID }}"
          response=$(curl -s -w "%{http_code}" -o publish_result.json \
            -X POST \
            -H "Authorization: Bearer ${{ env.TOKEN }}" \
            ${{ env.BASE_URL }}/api/deposit/depositions/${{ env.DEPOSIT_ID }}/actions/publish)

          echo "HTTP response code: $response"
          cat publish_result.json

          if [[ "$response" != "202" ]]; then
            echo "❌ Failed to publish deposition"
            exit 1
          fi

      - name: Write token.txt with RECORD_ID
        run: |
          if [[ "${{ github.event.inputs.environment }}" == "prod" ]]; then
            echo "RECORD_ID=${{ env.DEPOSIT_ID }}" > .github/token.txt
          else
            echo "RECORD_ID_DEV=${{ env.DEPOSIT_ID }}" > .github/token.txt
          fi